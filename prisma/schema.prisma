generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Captcha {
  id         String             @id @unique @default(cuid())
  token      String
  content    CatchaGeometries[]
  rightColor Int[]
}

model CatchaGeometries {
  id        BigInt   @id @unique @default(autoincrement())
  pointX    Int
  pointY    Int
  radius    Int
  Captcha   Captcha? @relation(fields: [captchaId], references: [id])
  color     Int[]
  captchaId String?
}

model Users {
  id                              String              @id @unique @default(cuid())
  role                            UserRoles[]         @default([user])
  rating                          Int
  token                           String              @unique
  login                           String              @unique
  rank                            Int
  email                           String              @unique
  emailVerified                   Boolean             @default(false)
  passwordHash                    String
  balance                         Int
  statusText                      String
  avatar                          String
  notifications                   Notifications[]
  accounts                        AccountsStore       @relation(fields: [accountsStoreId], references: [id])
  accountsStoreId                 String              @unique
  threads                         Thread[]
  ThreadComment                   ThreadComment[]
  ThreadsCollectionAdministrating ThreadsCollection[]
  bookmarkStoreId                 String              @unique
  BookmarkStore                   BookmarkStore       @relation(fields: [bookmarkStoreId], references: [id])
  likesSummary                    Int                 @default(0)
  memberSince                     BigInt              @db.BigInt
}

model ThreadsCollection {
  id       String    @id @unique @default(cuid())
  title    String
  canWrite UserRoles @default(user)
  canRead  UserRoles @default(user)
  threads  Thread[]
  admins   Users[]
  likes    Int
}

model BookmarkStore {
  id            String          @id @unique @default(cuid())
  likedThreads  Thread[]
  likedComments ThreadComment[]
  owner         Users?
}

model Thread {
  id                  String             @id @unique @default(cuid())
  title               String
  description         String
  likes               Int                @default(0)
  ThreadsCollection   ThreadsCollection? @relation(fields: [threadsCollectionId], references: [id])
  threadsCollectionId String?
  userOwner           Users?             @relation(fields: [usersId], references: [id])
  usersId             String?
  comments            ThreadComment[]
  BookmarkStore       BookmarkStore?     @relation(fields: [bookmarkStoreId], references: [id])
  bookmarkStoreId     String?
  createdAt           BigInt
}

model ThreadComment {
  id              String         @id @unique @default(cuid())
  user            Users          @relation(fields: [usersId], references: [id])
  usersId         String
  likes           Int
  createdAt       BigInt
  Thread          Thread?        @relation(fields: [threadId], references: [id])
  threadId        String?
  text            String
  BookmarkStore   BookmarkStore? @relation(fields: [bookmarkStoreId], references: [id])
  bookmarkStoreId String?
}

model Notifications {
  id        String  @id @unique @default(cuid())
  createdAt BigInt
  title     String
  text      String
  new       Boolean @default(true)
  userId    String
  user      Users   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AccountsStore {
  id            String         @id @unique @default(cuid())
  User          Users?
  SteamAccounts SteamAccount[]
}

model SteamAccount {
  id                String                  @id @unique @default(cuid())
  login             String
  password          String
  emailLogin        String
  emailPassword     String
  link              String
  lastActivity      Int
  state             MarketplaceAccountState @default(validating)
  games             SteamGame[]
  AccountsStorage   AccountsStore           @relation(fields: [accountsStorageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountsStorageId String
}

model SteamGame {
  id                String        @id @unique @default(cuid())
  name              String
  previewAvatarLink String
  gameStoreLink     String
  SteamAccount      SteamAccount? @relation(fields: [steamAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  steamAccountId    String?
}

enum UserRoles {
  low
  user
  medium
  moderator
  admin
  owner
}

enum MarketplaceAccountState {
  validating
  notValid
  selling
  sold
}
